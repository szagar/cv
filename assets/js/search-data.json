{
  
    
        "post0": {
            "title": "Python bytes",
            "content": "viztracer .",
            "url": "https://szagar.github.io/cv/bytes/2022/07/29/python_bytes.html",
            "relUrl": "/bytes/2022/07/29/python_bytes.html",
            "date": " • Jul 29, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Inflation data analytics",
            "content": "BLS provides us with a Python API: https://www.bls.gov/developers/api_python.htm . Ben Welsh CPI library with Python, which is a wrapper around the BLS Python API. . pip install cpi . import pandas as pd import cpi import seaborn as sns import matplotlib.pyplot as plt . cpi.update() . cpi_items_df = cpi.series.get(seasonally_adjusted=False).to_dataframe() . cpi_items_df.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 1423 entries, 0 to 1422 Data columns (total 22 columns): # Column Non-Null Count Dtype -- -- 0 year 1423 non-null int64 1 date 1423 non-null object 2 value 1423 non-null float64 3 series_id 1423 non-null object 4 series_title 1423 non-null object 5 series_survey 1423 non-null object 6 series_seasonally_adjusted 1423 non-null bool 7 series_periodicity_id 1423 non-null object 8 series_periodicity_code 1423 non-null object 9 series_periodicity_name 1423 non-null object 10 series_area_id 1423 non-null object 11 series_area_code 1423 non-null object 12 series_area_name 1423 non-null object 13 series_items_id 1423 non-null object 14 series_items_code 1423 non-null object 15 series_items_name 1423 non-null object 16 period_id 1423 non-null object 17 period_code 1423 non-null object 18 period_abbreviation 1423 non-null object 19 period_name 1423 non-null object 20 period_month 1423 non-null int64 21 period_type 1423 non-null object dtypes: bool(1), float64(1), int64(2), object(18) memory usage: 235.0+ KB . DATA CLEANING . While the data is already extremely clean, it actually has more info that what we need, we just need the monthly periods and this data set has monthly and annual, let’s clean it up and also set a date index. . cpi_items_df = cpi_items_df[cpi_items_df[&#39;period_type&#39;]==&#39;monthly&#39;] cpi_items_df[&#39;date&#39;] = pd.to_datetime(cpi_items_df[&#39;date&#39;]) cpi_items_df = cpi_items_df.set_index(&#39;date&#39;) . cpi_items_df[&#39;value&#39;].plot() . &lt;AxesSubplot:xlabel=&#39;date&#39;&gt; . Zoom in to a more current timeline. . fig = plt.figure(dpi=200) cpi_items_df[&#39;value&#39;].loc[&#39;2010&#39;:&#39;2023&#39;].plot(figsize=(10,4)) plt.xlabel(&#39;Date&#39;) plt.ylabel(&#39;CPI Value&#39;) . Text(0, 0.5, &#39;CPI Value&#39;) . If we were targeting a yearly 2% inflation rate since 2010, let’s explore what this line would look like on the same plot, starting with the 2010 CPI value. We’ll do a very simple method for this (overly simplified, but it should work fine for our exploratoy data analysis), by simply looping through the values and adding the original plus 2% of the original. Then we can plot these values against the real data. . cpi_items_df[&#39;value&#39;].loc[&#39;2010&#39;:&#39;2023&#39;].iloc[0] . 216.687 . start = cpi_items_df[&#39;value&#39;].loc[&#39;2010&#39;:&#39;2023&#39;].iloc[0] periods = len(cpi_items_df[&#39;value&#39;].loc[&#39;2010&#39;:&#39;2023&#39;])//12 . def get_target_cpi(previous_cpi): return previous_cpi + 0.02*(previous_cpi) . target_cpis = [start] for year in range(0,periods): target_cpis.append(get_target_cpi(target_cpis[year])) . target_cpis . [216.687, 221.02074000000002, 225.44115480000002, 229.949977896, 234.54897745392, 239.2399570029984, 244.02475614305837, 248.90525126591953, 253.88335629123793, 258.9610234170627, 264.14024388540395, 269.42304876311204, 274.8115097383743] . len(target_cpis) . 13 . Creating a pandas series for the target CPIs starting in 2010: . dates = pd.date_range(&#39;2010-01-01&#39;,&#39;2023-01-01&#39;,periods=periods+1) target_cpi_series = pd.Series(data =target_cpis, index= dates) . fig = plt.figure(dpi=200) cpi_items_df[&#39;value&#39;].loc[&#39;2010&#39;:&#39;2023&#39;].plot(figsize=(10,4)) target_cpi_series.plot(ls=&#39;--&#39;) plt.xlabel(&#39;Date&#39;) plt.ylabel(&#39;CPI Value&#39;); . Looks like the Fed was actually doing a pretty good job at keeping things steady and the pandemic, stimulus, and supply chain really put strain on the inflation rate. How bad is this compared to the 1970s? Let’s compare… . INFLATION IN THE 1970s . cpi_items_df[&#39;value&#39;].loc[&#39;1969&#39;:&#39;1980&#39;].iloc[0] . 35.6 . start = cpi_items_df[&#39;value&#39;].loc[&#39;1969&#39;:&#39;1980&#39;].iloc[0] periods = len(cpi_items_df[&#39;value&#39;].loc[&#39;1969&#39;:&#39;1980&#39;])//12 . def get_target_cpi(previous_cpi): return previous_cpi + 0.02*(previous_cpi) . target_cpis = [start] for year in range(0,periods): target_cpis.append(get_target_cpi(target_cpis[year])) . target_cpis . [35.6, 36.312000000000005, 37.03824, 37.7790048, 38.534584896000005, 39.305276593920006, 40.091382125798404, 40.89320976831437, 41.71107396368066, 42.54529544295428, 43.39620135181336, 44.26412537884963, 45.14940788642662] . len(target_cpis) . 13 . Creating a pandas series for the target CPIs starting in 2010: . dates = pd.date_range(&#39;1969-01-01&#39;,&#39;1980-01-01&#39;,periods=periods+1) target_cpi_series = pd.Series(data =target_cpis, index= dates) . fig = plt.figure(dpi=200) cpi_items_df[&#39;value&#39;].loc[&#39;1969&#39;:&#39;1980&#39;].plot(figsize=(10,4)) target_cpi_series.plot(ls=&#39;--&#39;) plt.xlabel(&#39;Date&#39;) plt.ylabel(&#39;CPI Value&#39;); . Wow, things were really bad in the 70s compared to today! Let’s see the change when Paul Volcker “broke the back” of inflation by substantially raising rates in the early 1980s. . Volcker &#8220;crushes&#8221; inflation: . fig = plt.figure(dpi=200) cpi_items_df[&#39;value&#39;].loc[&#39;1969&#39;:&#39;1990&#39;].plot(figsize=(10,4)) plt.xlabel(&#39;Date&#39;) plt.ylabel(&#39;CPI Value&#39;); . So far we’ve explored the raw CPI values, but we’re probably more interested in terms of percent change as is reported on the news (e.g. inflation came in at 6%). Let’s see the change in rates of inflation after Volcker dramatically hikes rates: . fig = plt.figure(dpi=200) cpi_items_df[&#39;value&#39;].loc[&#39;1969&#39;:&#39;1990&#39;].pct_change(12).plot(figsize=(10,4)) plt.axhline(0.02,ls=&#39;--&#39;,c=&#39;red&#39;) plt.xlabel(&#39;Date&#39;) plt.ylabel(&#39;CPI YoY % Change&#39;); . Now let’s do a similar plot for the current timeline: . fig = plt.figure(dpi=200) cpi_items_df[&#39;value&#39;].loc[&#39;2010&#39;:&#39;2023&#39;].pct_change(12).plot(figsize=(10,4)) plt.axhline(0.02,ls=&#39;--&#39;,c=&#39;red&#39;) plt.xlabel(&#39;Date&#39;) plt.ylabel(&#39;CPI YoY % Change&#39;); . Looks like rates may have to rise quite a bit to solve this! We also have to consider supply chain issues and global macroeconomic changes (e.g. conflict in Ukraine) that can effect particular commodities, such as oil. . To conclude, let’s do a similar plot for only a single category: Gasoline (All Types): . gas = cpi.series.get(items=&quot;Gasoline (all types)&quot;, seasonally_adjusted=False).to_dataframe() . gas = gas[gas[&#39;period_type&#39;]==&#39;monthly&#39;] gas[&#39;date&#39;] = pd.to_datetime(gas[&#39;date&#39;]) gas = gas.set_index(&#39;date&#39;) . fig = plt.figure(dpi=200) gas[&#39;value&#39;].loc[&#39;2015&#39;:&#39;2023&#39;].pct_change(12).plot(figsize=(10,4)) plt.axhline(0,ls=&#39;--&#39;,c=&#39;red&#39;) plt.xlabel(&#39;Date&#39;) plt.ylabel(&#39;Gasoline Price YoY % Change&#39;); .",
            "url": "https://szagar.github.io/cv/inflation/analytics/2022/07/28/inflation_data.html",
            "relUrl": "/inflation/analytics/2022/07/28/inflation_data.html",
            "date": " • Jul 28, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Evernote",
            "content": "label1 label2 label3 label4 label5 . Ever | johnny | Camel+johnny | 178641731 | 0300778716 | . Cap 1 | smzagar | camel+johnny | . TD | ph | johnny | me | . TD | gmail | johnny | sstk | 425-9600926 | . beth | johnny | johnny | . goflex | zadmin | zadmin+rags | NAS1-GoFlex | . goflex | meo | nas+abc | NAS1-GoFlex | . fios | johnny | Marley99 | 350-008-489-0001060-0001 | . go dad | 36083233 | [] | . intuit | me | johnny | . aetna | m | 123 | . ib | me724 | johnny | U1049030 | . ib | last499 | johnny | U934032 | . ibpaper (s) | simsim321 | paperjohnny | DU139750 | . ibpaper (t) | tagar398 | DU95153 | . fios | johnny | clyde124 | . bluehost | camel_99 | ragsrags | . aspernick | /wp-admin | zadmin | aspernick99 | . aetna | smzagar | aetna123 | . wireless | szagar | v+johnny | rags | . mybenefits.conexis.com | szagar | Cobra#99 | . ms office | product ID | 03314-017-9486357-02676 | product key | W4WF3-9Y7HJ-YP7G3-WVK3M-WDH7G | . codeschool | just | johnny | . k:123-92-5742 s:134-90-4467 . Au 529/justarbit/Gmail/GU#johnny Apple/szagar/Muttley#jounny Expass//Marley#johnny angie/arb/angie+johnny blood99/6099836 Nadex doggie#johnny Sf #johnny Amazon johnny/ AmazonJob/112233/stezagar Apple Gu#johnny Amex m/Cow#johnny Amex/ tzagar99Gu#99 Bnl/gmail/Muttley#johnny Census GU#johnnyy Cerego/carts/gmail/LP#99 E*TRADE/Johnny/Muttley#99 Ipvanish Gmail/IpVanishjohnny . Ewfo/trademaid/Trademaid99/ . 529/justarbit/Gu#johnny aaa/justarbit/muttley#99 bfc/szagar+Johnny/Au#johnny ChaAzn/szagar99/amazon99 Coinb/Gmail/Au#johnny Cosctco/yahoo/Gu#johnny CssProf/gmail/muttley#99 zts/sz/TradeStation#johnni CB y gain:SZa:Marley#johnny:E51762 Github/sz/Gu#johnny Google//LostPhone#johnny Hulu/yahoo/Hulu#johnny in/brokersjohnny Justarbit/Gu#johnny Apple/Gu#99 Leetcode/gmail/LC#johnny Marriott/szagar/Marriott#johnny Mongo/gmail//men-cluster-1i/zts/Marley#99 Netflx/yahoo/netjohnny Nys/szagar/SydneyKaity#johnny pseg/gmail/Marley#johnny pycharm/gmail/JetBrains99 Robinho/gmail/ sbux /just at it/AU#johnny scwa/szagar99/Muttley#johnny sssbynais/gmail/Gu#johnny tdauto/teri68/Model123 Total / cell/totaljohnny TS-Tz-210R3017 TS/szagar/68lyne@/Mutley# Johnny Twit/szagr/Mutley#johnny usgov/sz99/Gu#johnny Vang:szagar:LP#johnny Verizon/Gmail/Mutlry#johnny VNC/gmail/Muttley#johnny vnc/pc lap/gmail/pclap#99 aws/aws_bta#johnny Aws-s3/ zts_user . Ok . iPhone Niki/6454 . ms office / 03314-017-9486357-02895 1436 evernote/justarbit@yahoo.com/szagr/EverNote99 . . Conflicting modification on September 26, 2013 9:53:47 AM: . Ever johnny Camel+johnny 178641731 0300778716 Cap 1 smzagar camel+johnny . TD ph johnny me . TD gmail johnny sstk 425-9600926 beth johnny johnny . goflex zadmin zadmin+rags NAS1-GoFlex . goflex me nas+abc NAS1-GoFlex . fios johnny cable123 . go dad 36083233 . intuit me johnny . aetna m 123 . ib me724 johnny U1049030 . ib last499 johnny U934032 . ibpaper (s) simsim321 paperjohnny DU139750 . ibpaper (t) tagar398 . DU95153 . fios johnny 1234 . bluehost . camel_99 ragsrags . aspernick /wp-admin zadmin aspernick99 . aetna smzagar aetna123 . wireless szagar v+johnny rags . mybenefits.conexis.com szagar C#99 . ms office product ID 03314-017-9486357-02676 product key W4WF3-9Y7HJ-YP7G3-WVK3M-WDH7G codeschool just johnny . k:123-92-5742 s:134-90-4467 . angie/arb/angie+johnny blood99/6099836 . iPhone Niki/6454 MLab/zts/szagar/Minho+johnny99 WA/Marley99 . 1436 evernote/justarbit@yahoo.com/szagr/EverNote99 . Benefit resource.com/Teri68lynne/Marley99 .",
            "url": "https://szagar.github.io/cv/achive/evernote/2022/07/15/archive-evernote.html",
            "relUrl": "/achive/evernote/2022/07/15/archive-evernote.html",
            "date": " • Jul 15, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Mac Setup Notes",
            "content": "TOC . oh my zsh | xterm | . on my zsh . https://ohmyz.sh/ | . Jupyter . add kernel python -m ipykernel install --user --name=myenv | . jupyter setup . python -m venv cv_env | source cv_env/bin/activate | /Users/szagar/work/blog/cv/cv_env/bin/python -m pip install --upgrade pip | pip install jupyter | pip install ipykernel | python -m ipykernel install --name=cv-venv | . jupyter tools . list jupyter virtual envs: jupyter kernelspec list | remove jupyter virtual envs: jupyter kernelspec uninstall &lt;venv name&gt; | . jekyll notes . convert your notebooks and word documents to .md posts in _posts make convert . | Launch just the jekyll server make server . | . fastpages notes . all available commands : make | run the blog with live preview : make server first time, it&#39;ll build the required Docker images | monitors any changes in ./_notebooks/.ipynb/ and ./_word/.docx;*.doc and rebuild the blog on change | Jekyll server on https://127.0.0.1:4000 | . | run all services in the background : make server-detached | stop the services : make stop | restart just the Jekyll server, already running in the background : restart-jekyll . | troubleshoot: If containers won&#39;t start: try make build first, this would rebuild all the containers from scratch . | more notes . | . nbdev . setup repo via template | clone repo | create venv | add kernel to jupyter | in jupyter terminal: pip install nbdev | edit settings.ini # lib_name = your_project_name # repo_name = name of github repo # user = your_github_username # description = A description of your project # keywords = some keywords # author = Your Name # author_email = email@example.com # copyright = Your Name or Company Name # branch = The default branch of your GitHub repo (usually either master or main) . | install git hooks, from project folder: nbdev_install_git_hooks | start jupyter lab, open 00_core.ipynb | add code, examples, test and markdown headings | Build lib (create the python module): nbdev_build_lib | create your documentation home page and README.md Edit index.ipynb edit import statement | edit install comment | add some examples | . | Build docs nbdev_build_docs | . | notes: . if notebook conflicts appear, run: nbdev_fix_merge filename.ipynb | if using a subdirectory to contain .ipynb files (nbs_path set to be anything other than the project root) either install these modules locally, as their relative import will take you beyond the top-level package, which can be done by running pip install -e . in the project root, to install the modules to your environment in editable mode. | or make a simlink in your notebook folder to the library folder, which can be done by running ln -s lib_path lib_name (adjust lib_path and lib_name to your use case). | . | .",
            "url": "https://szagar.github.io/cv/development/setup/mac/2022/07/01/setup-mac.html",
            "relUrl": "/development/setup/mac/2022/07/01/setup-mac.html",
            "date": " • Jul 1, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Setup Notes",
            "content": "Jupyter . add kernel python -m ipykernel install --user --name=myenv | . jupyter setup . python -m venv cv_env | source cv_env/bin/activate | /Users/szagar/work/blog/cv/cv_env/bin/python -m pip install --upgrade pip | pip install jupyter | pip install ipykernel | python -m ipykernel install --name=cv-venv | . jupyter tools . list jupyter virtual envs: jupyter kernelspec list | remove jupyter virtual envs: jupyter kernelspec uninstall &lt;venv name&gt; | . jekyll notes . convert your notebooks and word documents to .md posts in _posts make convert . | Launch just the jekyll server make server . | . fastpages notes . all available commands : make | run the blog with live preview : make server first time, it&#39;ll build the required Docker images | monitors any changes in ./_notebooks/.ipynb/ and ./_word/.docx;*.doc and rebuild the blog on change | Jekyll server on https://127.0.0.1:4000 | . | run all services in the background : make server-detached | stop the services : make stop | restart just the Jekyll server, already running in the background : restart-jekyll . | troubleshoot: If containers won&#39;t start: try make build first, this would rebuild all the containers from scratch . | more notes . | . nbdev . setup repo via template | clone repo | create venv | add kernel to jupyter | in jupyter terminal: pip install nbdev | edit settings.ini # lib_name = your_project_name # repo_name = name of github repo # user = your_github_username # description = A description of your project # keywords = some keywords # author = Your Name # author_email = email@example.com # copyright = Your Name or Company Name # branch = The default branch of your GitHub repo (usually either master or main) . | install git hooks, from project folder: nbdev_install_git_hooks | start jupyter lab, open 00_core.ipynb | add code, examples, test and markdown headings | Build lib (create the python module): nbdev_build_lib | create your documentation home page and README.md Edit index.ipynb edit import statement | edit install comment | add some examples | . | Build docs nbdev_build_docs | . | notes: . if notebook conflicts appear, run: nbdev_fix_merge filename.ipynb | if using a subdirectory to contain .ipynb files (nbs_path set to be anything other than the project root) either install these modules locally, as their relative import will take you beyond the top-level package, which can be done by running pip install -e . in the project root, to install the modules to your environment in editable mode. | or make a simlink in your notebook folder to the library folder, which can be done by running ln -s lib_path lib_name (adjust lib_path and lib_name to your use case). | . | .",
            "url": "https://szagar.github.io/cv/development/notes/setup/2022/06/20/setup_notes.html",
            "relUrl": "/development/notes/setup/2022/06/20/setup_notes.html",
            "date": " • Jun 20, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "pyscript notes",
            "content": "Articles . Real Python - A First Look at PyScript: Python in the Web Browser | .",
            "url": "https://szagar.github.io/cv/development/python/web/pyscript/2022/06/20/pyscript_notes.html",
            "relUrl": "/development/python/web/pyscript/2022/06/20/pyscript_notes.html",
            "date": " • Jun 20, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "AirFlow Notes",
            "content": "",
            "url": "https://szagar.github.io/cv/development/notes/airflow/2022/06/20/notest_AirFlow.html",
            "relUrl": "/development/notes/airflow/2022/06/20/notest_AirFlow.html",
            "date": " • Jun 20, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Python Code Style",
            "content": "Comments . Tagging: # TODO: | # BUG: | # FIXME: | . | . Docstrings . PEP 257 | realpython | Docstring Types:: (function, class, class method, module, package, and script) | Docstring Formats: The different docstring “formats” (Google, NumPy/SciPy, reStructuredText, and Epytext) | . &quot;&quot;&quot;This is the summary line This is the further elaboration of the docstring. Within this section, you can elaborate further on details as appropriate for the situation. Notice that the summary and the elaboration is separated by a blank new line. &quot;&quot;&quot; # Notice the blank line above. Code should continue on this line. Class Docstrings . A brief summary of its purpose and behavior | Any public methods, along with a brief description | Any class properties (attributes) | Anything related to the interface for subclassers, if the class is intended to be subclassed | . class SimpleClass: &quot;&quot;&quot;Class docstrings go here.&quot;&quot;&quot; def say_hello(self, name: str): &quot;&quot;&quot;Class method docstrings go here.&quot;&quot;&quot; print(f&#39;Hello {name}&#39;) . example: . class Animal: &quot;&quot;&quot; A class used to represent an Animal ... Attributes - says_str : str a formatted string to print out what the animal says name : str the name of the animal sound : str the sound that the animal makes num_legs : int the number of legs the animal has (default 4) Methods - says(sound=None) Prints the animals name and what sound it makes &quot;&quot;&quot; says_str = &quot;A {name} says {sound}&quot; def __init__(self, name, sound, num_legs=4): &quot;&quot;&quot; Parameters - name : str The name of the animal sound : str The sound the animal makes num_legs : int, optional The number of legs the animal (default is 4) &quot;&quot;&quot; self.name = name self.sound = sound self.num_legs = num_legs def says(self, sound=None): &quot;&quot;&quot;Prints what the animals name is and what sound it makes. If the argument `sound` isn&#39;t passed in, the default Animal sound is used. Parameters - sound : str, optional The sound the animal makes (default is None) Raises NotImplementedError If no sound is set for the animal or passed in as a parameter. &quot;&quot;&quot; if self.sound is None and sound is None: raise NotImplementedError(&quot;Silent Animals are not supported!&quot;) out_sound = self.sound if sound is None else sound print(self.says_str.format(name=self.name, sound=out_sound)) .",
            "url": "https://szagar.github.io/cv/development/notes/python/style/2022/06/20/notes-python_style.html",
            "relUrl": "/development/notes/python/style/2022/06/20/notes-python_style.html",
            "date": " • Jun 20, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Pydantic Notes",
            "content": "&quot;&quot;&quot; Basic example showing how to read and validate data from a file using Pydantic. &quot;&quot;&quot; import json from typing import List, Optional import pydantic class ISBNMissingError(Exception): &quot;&quot;&quot;Custom error that is raised when both ISBN10 and ISBN13 are missing.&quot;&quot;&quot; def __init__(self, title: str, message: str) -&gt; None: self.title = title self.message = message super().__init__(message) class ISBN10FormatError(Exception): &quot;&quot;&quot;Custom error that is raised when ISBN10 doesn&#39;t have the right format.&quot;&quot;&quot; def __init__(self, value: str, message: str) -&gt; None: self.value = value self.message = message super().__init__(message) class Author(pydantic.BaseModel): name: str verified: bool class Book(pydantic.BaseModel): &quot;&quot;&quot;Represents a book with that you can read from a JSON file.&quot;&quot;&quot; title: str author: str publisher: str price: float isbn_10: Optional[str] isbn_13: Optional[str] subtitle: Optional[str] author2: Optional[Author] @pydantic.root_validator(pre=True) @classmethod def check_isbn_10_or_13(cls, values): &quot;&quot;&quot;Make sure there is either an isbn_10 or isbn_13 value defined&quot;&quot;&quot; if &quot;isbn_10&quot; not in values and &quot;isbn_13&quot; not in values: raise ISBNMissingError( title=values[&quot;title&quot;], message=&quot;Document should have either an ISBN10 or ISBN13&quot;, ) return values @pydantic.validator(&quot;isbn_10&quot;) @classmethod def isbn_10_valid(cls, value) -&gt; None: &quot;&quot;&quot;Validator to check whether ISBN10 is valid&quot;&quot;&quot; chars = [c for c in value if c in &quot;0123456789Xx&quot;] if len(chars) != 10: raise ISBN10FormatError(value=value, message=&quot;ISBN10 should be 10 digits.&quot;) def char_to_int(char: str) -&gt; int: if char in &quot;Xx&quot;: return 10 return int(char) if sum((10 - i) * char_to_int(x) for i, x in enumerate(chars)) % 11 != 0: raise ISBN10FormatError( value=value, message=&quot;ISBN10 digit sum should be divisible by 11.&quot; ) return value class Config: &quot;&quot;&quot;Pydantic config class&quot;&quot;&quot; allow_mutation = False anystr_lower = True def main() -&gt; None: &quot;&quot;&quot;Main function.&quot;&quot;&quot; data = json.loads(data_json) books: List[Book] = [Book(**item) for item in data] print(books[0]) print(books[0].dict(exclude={&quot;price&quot;})) print(books[1].copy()) return # Read data from a JSON file with open(&quot;./data.json&quot;) as file: data = json.load(file) books: List[Book] = [Book(**item) for item in data] # print(books) print(books[0]) # print(books[0].dict(exclude={&quot;price&quot;})) # print(books[1].copy()) if __name__ == &quot;__main__&quot;: main() . title=&#39;zero to one&#39; author=&#39;peter thiel&#39; publisher=&#39;ballantine books&#39; price=14.29 isbn_10=&#39;0753555190&#39; isbn_13=&#39;978-0753555194&#39; subtitle=&#39;notes on startups, or how to build the future&#39; author2=Author(name=&#39;Peter Thiel&#39;, verified=True) {&#39;title&#39;: &#39;zero to one&#39;, &#39;author&#39;: &#39;peter thiel&#39;, &#39;publisher&#39;: &#39;ballantine books&#39;, &#39;isbn_10&#39;: &#39;0753555190&#39;, &#39;isbn_13&#39;: &#39;978-0753555194&#39;, &#39;subtitle&#39;: &#39;notes on startups, or how to build the future&#39;, &#39;author2&#39;: {&#39;name&#39;: &#39;Peter Thiel&#39;, &#39;verified&#39;: True}} title=&#39;the lean startup&#39; author=&#39;eric ries&#39; publisher=&#39;penguin uk&#39; price=12.96 isbn_10=&#39;0670921602&#39; isbn_13=&#39;978-0670921607&#39; subtitle=&#39;how relentless change creates radically successful businesses&#39; author2=None . data.json . data_json = &#39;&#39;&#39;[ { &quot;title&quot;: &quot;Zero to One&quot;, &quot;subtitle&quot;: &quot;Notes on Startups, or How to Build the Future&quot;, &quot;author&quot;: &quot;Peter Thiel&quot;, &quot;publisher&quot;: &quot;Ballantine Books&quot;, &quot;isbn_10&quot;: &quot;0753555190&quot;, &quot;isbn_13&quot;: &quot;978-0753555194&quot;, &quot;price&quot;: 14.29, &quot;author2&quot;: { &quot;name&quot;: &quot;Peter Thiel&quot;, &quot;verified&quot;: true } }, { &quot;title&quot;: &quot;The Lean Startup&quot;, &quot;subtitle&quot;: &quot;How Relentless Change Creates Radically Successful Businesses&quot;, &quot;author&quot;: &quot;Eric Ries&quot;, &quot;publisher&quot;: &quot;Penguin UK&quot;, &quot;isbn_10&quot;: &quot;0670921602&quot;, &quot;isbn_13&quot;: &quot;978-0670921607&quot;, &quot;price&quot;: 12.96 }, { &quot;title&quot;: &quot;A Promised Land&quot;, &quot;author&quot;: &quot;Barack Obama&quot;, &quot;publisher&quot;: &quot;Viking UK&quot;, &quot;isbn_10&quot;: &quot;0241491517&quot;, &quot;isbn_13&quot;: &quot;978-0241491515&quot;, &quot;price&quot;: 31.74 }, { &quot;title&quot;: &quot;The Hard Thing about Hard Things&quot;, &quot;subtitle&quot;: &quot;Building a Business When There Are No Easy Answers&quot;, &quot;author&quot;: &quot;Ben Horowitz&quot;, &quot;publisher&quot;: &quot;HarperBusiness&quot;, &quot;isbn_10&quot;: &quot;0062273205&quot;, &quot;isbn_13&quot;: &quot;978-0062273208&quot;, &quot;price&quot;: 15.55 }, { &quot;title&quot;: &quot;Design patterns&quot;, &quot;subtitle&quot;: &quot;Elements of reusable object-oriented software&quot;, &quot;author&quot;: &quot;Erich Gamma, Richard Helm, Ralph Johnson, John Vlissides&quot;, &quot;publisher&quot;: &quot;Addison Wesley&quot;, &quot;isbn_10&quot;: &quot;0201633612&quot;, &quot;isbn_13&quot;: &quot;978-0201633610&quot;, &quot;price&quot;: 50 }, { &quot;title&quot;: &quot;Clean Code&quot;, &quot;subtitle&quot;: &quot;A Handbook of Agile Software Craftsmanship&quot;, &quot;author&quot;: &quot;Robert Martin&quot;, &quot;publisher&quot;: &quot;Financial Times Prentice Hall&quot;, &quot;isbn_10&quot;: &quot;0132350882&quot;, &quot;isbn_13&quot;: &quot;978-0132350884&quot;, &quot;price&quot;: 33.43 } ] &#39;&#39;&#39; . does dataclass support slots? . from dataclasses import dataclass, field, astuple, asdict . @dataclass(frozen=True, order=True) class Comment: id: int text: str = &quot;&quot; replies: list[int] = field(default_factory=list) . use default_factory for mutable defaults replies: list[int] = field(default_factory=List) | . | . attr . has slots | . pydantic .",
            "url": "https://szagar.github.io/cv/development/notes/python/pydantic/dataclass/2022/06/20/notes-python_pydantic.html",
            "relUrl": "/development/notes/python/pydantic/dataclass/2022/06/20/notes-python_pydantic.html",
            "date": " • Jun 20, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Dataclass Notes",
            "content": "youtube . Elegant Solutions for Everyday Python | Thinking Outside the GIL with AsyncIO and Multiprocessing | . inspect . from dataclasses import dataclass @dataclass(frozen=True, order=True) class Comment: id: int text: str = &quot;&quot; import inspect import pprint pprint.pprint(inspect.getmembers(Comment, inspect.isfunction)) . [(&#39;__delattr__&#39;, &lt;function __create_fn__.&lt;locals&gt;.__delattr__ at 0x109c1ea60&gt;), (&#39;__eq__&#39;, &lt;function __create_fn__.&lt;locals&gt;.__eq__ at 0x109c1e700&gt;), (&#39;__ge__&#39;, &lt;function __create_fn__.&lt;locals&gt;.__ge__ at 0x109c1e940&gt;), (&#39;__gt__&#39;, &lt;function __create_fn__.&lt;locals&gt;.__gt__ at 0x109c1e8b0&gt;), (&#39;__hash__&#39;, &lt;function __create_fn__.&lt;locals&gt;.__hash__ at 0x109c1eaf0&gt;), (&#39;__init__&#39;, &lt;function __create_fn__.&lt;locals&gt;.__init__ at 0x109c1e670&gt;), (&#39;__le__&#39;, &lt;function __create_fn__.&lt;locals&gt;.__le__ at 0x109c1e820&gt;), (&#39;__lt__&#39;, &lt;function __create_fn__.&lt;locals&gt;.__lt__ at 0x109c1e790&gt;), (&#39;__repr__&#39;, &lt;function __create_fn__.&lt;locals&gt;.__repr__ at 0x109c1e5e0&gt;), (&#39;__setattr__&#39;, &lt;function __create_fn__.&lt;locals&gt;.__setattr__ at 0x109c1e9d0&gt;)] . import pprint .",
            "url": "https://szagar.github.io/cv/development/notes/python/dataclass/2022/06/20/notes-python_dataclass.html",
            "relUrl": "/development/notes/python/dataclass/2022/06/20/notes-python_dataclass.html",
            "date": " • Jun 20, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Encoding Notes",
            "content": "inspect . b&#39;a string&#39;.decode(&#39;ascii&#39;) . &#39;a string&#39; . To get bytes from string, encode it. . &#39;a string&#39;.encode(&#39;ascii&#39;) . b&#39;a string&#39;.decode(&#39;utf-8&#39;) . &#39;a string&#39; . Unicode is international standard 3 of the most popular encoding standards defined by Unicode are UTF-8, UTF-16 and UTF-32. . UTF-8: It uses 1, 2, 3 or 4 bytes to encode every code point. It is backwards compatible with ASCII. All English characters just need 1 byte — which is quite efficient. We only need more bytes if we are sending non-English characters. It is the most popular form of encoding, and is by default the encoding in Python 3. In Python 2, the default encoding is ASCII (unfortunately). . We need encode method to convert unicode code points to bytes. This will happen typically during writing string data to a CSV or JSON file for example. We need decode method to convert bytes to unicode code points. This will typically happen during reading data from a file into strings. . Why are encode and decode methods needed? . What data types in Python handle Unicode code points and bytes? As we discussed earlier, in Python, strings can either be represented in bytes or unicode code points. The main takeaways in Python are: | Python 2 uses str type to store bytes and unicode type to store unicode code points. All strings by default are str type — which is bytes~ And Default encoding is ASCII. So if an incoming file is Cyrillic characters, Python 2 might fail because ASCII will not be able to handle those Cyrillic Characters. In this case, we need to remember to use decode(&quot;utf-8&quot;) during reading of files. This is inconvenient. | Python 3 came and fixed this. Strings are stillstr type by default but they now mean unicode code points instead — we carry what we see. If we want to store these str type strings in files we use bytes type instead. Default encoding is UTF-8 instead of ASCII. Perfect! |",
            "url": "https://szagar.github.io/cv/development/notes/python/encoding/2022/06/20/notes-python-encoding.html",
            "relUrl": "/development/notes/python/encoding/2022/06/20/notes-python-encoding.html",
            "date": " • Jun 20, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "pyscript notes",
            "content": "Articles . Real Python - A First Look at PyScript: Python in the Web Browser | .",
            "url": "https://szagar.github.io/cv/development/python/web/pyscript/2022/06/20/notes-pyscript.html",
            "relUrl": "/development/python/web/pyscript/2022/06/20/notes-pyscript.html",
            "date": " • Jun 20, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Options",
            "content": "",
            "url": "https://szagar.github.io/cv/development/notes/options/2022/06/20/notes-options.html",
            "relUrl": "/development/notes/options/2022/06/20/notes-options.html",
            "date": " • Jun 20, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "numpy notes",
            "content": "import numpy as np . ModuleNotFoundError Traceback (most recent call last) Input In [1], in &lt;cell line: 1&gt;() -&gt; 1 import numpy as np ModuleNotFoundError: No module named &#39;numpy&#39; . import random rnd = random.Random(1234) for _ in range(10): print(np.random.randint(2,3)) for _ in range(10): print(rnd.randint(2,3)) . 2 2 2 2 2 2 2 2 2 2 3 2 2 2 2 2 2 3 2 2 . c = np.arange(10) . c.shape = (5,2) c . array([[0, 1], [2, 3], [4, 5], [6, 7], [8, 9]]) . c=c.T c . array([[0, 2, 4, 6, 8], [1, 3, 5, 7, 9]]) . c.reshape(5,2) . array([[0, 2], [4, 6], [8, 1], [3, 5], [7, 9]]) . c.flatten() . array([0, 2, 4, 6, 8, 1, 3, 5, 7, 9]) . a = np.arange(15).reshape(3, 5) a . array([[ 0, 1, 2, 3, 4], [ 5, 6, 7, 8, 9], [10, 11, 12, 13, 14]]) . v = a[1:3,:] . v . array([[ 5, 6, 99, 8, 9], [10, 11, 12, 13, 14]]) . a . array([[ 0, 1, 2, 3, 4], [ 5, 6, 99, 8, 9], [10, 11, 12, 13, 14]]) . v[0] = 99 . v . array([[99, 99, 99, 99, 99], [10, 11, 12, 13, 14]]) . a . array([[ 0, 1, 2, 3, 4], [99, 99, 99, 99, 99], [10, 11, 12, 13, 14]]) . v[1] . array([10, 11, 12, 13, 14]) . v[1][1] . 11 . a . array([[ 0, 1, 2, 3, 4], [99, 99, 99, 99, 99], [10, 11, 12, 13, 14]]) . m = np.logical_and(a &gt; 12, a &lt; 99) m . array([[False, False, False, False, False], [False, False, False, False, False], [False, False, False, True, True]]) . a &gt; 98 . array([[False, False, False, False, False], [ True, True, True, True, True], [False, False, False, False, False]]) . a[m] = -5 . a . array([[ 0, 1, 2, 3, 4], [99, 99, 99, 99, 99], [10, 11, 12, -5, -5]]) . v . array([[99, 99, 99, 99, 99], [10, 11, 12, -5, -5]]) . b = np.arange(15).reshape(3, 5) . b . array([[ 0, 1, 2, 3, 4], [ 5, 6, 7, 8, 9], [10, 11, 12, 13, 14]]) . b[[0,2],:] . array([[ 0, 1, 2, 3, 4], [10, 11, 12, 13, 14]]) . b[[True,False,True],2:4] . array([[ 2, 3], [12, 13]]) . np.ones(2,str) . array([&#39;1&#39;, &#39;1&#39;], dtype=&#39;&lt;U1&#39;) . cs = np.arange(10) cs . array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) . print(cs.cumsum()) . [ 0 1 3 6 10 15 21 28 36 45] . import pandas as pd . data = {&#39;Name&#39;:[&#39;Tom&#39;,&#39;nick&#39;,&#39;krish&#39;], &#39;Age&#39;:[20,21,19]} df = pd.DataFrame(data) df . Name Age . 0 Tom | 20 | . 1 nick | 21 | . 2 krish | 19 | . df[[&#39;Age&#39;]] . Age . 0 20 | . 1 21 | . 2 19 | . df.iloc[0:2][&#39;Age&#39;] . 0 20 1 21 Name: Age, dtype: int64 . df[0:1][[&#39;Name&#39;,&#39;Age&#39;]] . Name Age . 0 Tom | 20 | .",
            "url": "https://szagar.github.io/cv/numpy/notes/2022/06/20/notes-numpy.html",
            "relUrl": "/numpy/notes/2022/06/20/notes-numpy.html",
            "date": " • Jun 20, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Markdown notes",
            "content": "Notebook markdown . This adds a linked superscript 15 . 15. This is the actual footnote↩ . This adds a linked superscript 20 . 20. This is the actual footnote; with a link as well! and a single quote &#39; too!↩ .",
            "url": "https://szagar.github.io/cv/markdown/notes/2022/06/20/notes-markdown.html",
            "relUrl": "/markdown/notes/2022/06/20/notes-markdown.html",
            "date": " • Jun 20, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "Git Notes",
            "content": "diff . dunk | . b&#39;a string&#39;.decode(&#39;utf-8&#39;) . &#39;a string&#39; . Unicode is international standard 3 of the most popular encoding standards defined by Unicode are UTF-8, UTF-16 and UTF-32. . UTF-8: It uses 1, 2, 3 or 4 bytes to encode every code point. It is backwards compatible with ASCII. All English characters just need 1 byte — which is quite efficient. We only need more bytes if we are sending non-English characters. It is the most popular form of encoding, and is by default the encoding in Python 3. In Python 2, the default encoding is ASCII (unfortunately). . We need encode method to convert unicode code points to bytes. This will happen typically during writing string data to a CSV or JSON file for example. We need decode method to convert bytes to unicode code points. This will typically happen during reading data from a file into strings. . Why are encode and decode methods needed? . What data types in Python handle Unicode code points and bytes? As we discussed earlier, in Python, strings can either be represented in bytes or unicode code points. The main takeaways in Python are: | Python 2 uses str type to store bytes and unicode type to store unicode code points. All strings by default are str type — which is bytes~ And Default encoding is ASCII. So if an incoming file is Cyrillic characters, Python 2 might fail because ASCII will not be able to handle those Cyrillic Characters. In this case, we need to remember to use decode(&quot;utf-8&quot;) during reading of files. This is inconvenient. | Python 3 came and fixed this. Strings are stillstr type by default but they now mean unicode code points instead — we carry what we see. If we want to store these str type strings in files we use bytes type instead. Default encoding is UTF-8 instead of ASCII. Perfect! |",
            "url": "https://szagar.github.io/cv/development/notes/git/2022/06/20/notes-git.html",
            "relUrl": "/development/notes/git/2022/06/20/notes-git.html",
            "date": " • Jun 20, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "Fastpages notes",
            "content": "Fastpages . fastai forums | fastpages repo | repo README | upgrading guide | . Fastpages, developing locally . Run server locally Pay attention to the emitted logs when you save your notebooks or files. Often, you will see errors here that will give you important clues. | . | When developing locally Jupyter notebooks are converted to markdown files in the _posts folder. Take a look at the problematic blog posts and see if you can spot the offending HTML or markdown in that code. . | Use your browser&#39;s developer tools to see if there are any errors. Common errors are: . not able to find images because they have not been saved into the right folder, | javascript or other errors. | | If you receive a Jekyll build error or a Liquid error, search for this error on Stack Overflow to provide more insight on the problem | . Frequent Errors . Malformed front matter must be valid YAML | escape special chars with double quotes - title: &quot;Deep learning: A tutorial&quot; | YAML tutorial | . | FAQ | . Customize Fastpages . minima theme | .",
            "url": "https://szagar.github.io/cv/fastpages/jupyter/blog/2022/06/20/notes-fastpages.html",
            "relUrl": "/fastpages/jupyter/blog/2022/06/20/notes-fastpages.html",
            "date": " • Jun 20, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "Docker notes",
            "content": "Docker Hun . szagr / | . Building images . # Dockerfile FROM ubuntu RUN apt update &amp;&amp; apt install -y cowsay CMD [&quot;/usr/games/cowsay&quot;, &quot;Dockerfiles are cool!&quot;]# Dockerfile FROM python 3.7.5-slim RUN python -m pip install parse realpython-reader REPL . -it needed to run container interactively$ docker run -it --rm python:rc . | . Docker CLI . docker --help | Build an image from Dockerfile . with cowsay tag, usiner Dockerfile in current dir$ docker build -t cowsay . . | . | List images . $ docker images ps -a . | List containers . $ docker docker ps -a . | Run the image . -rm cleans up container afer use$ docker run -rm cowsay . | . | Delete image . $ docker rmi &lt;/strong&gt;&lt;/p&gt; &lt;/blockquote&gt; &lt;/li&gt; Delete container . $ docker rm &lt;/strong&gt;&lt;/p&gt; &lt;/blockquote&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . | . | .",
            "url": "https://szagar.github.io/cv/development/notes/deployment/docker/2022/06/20/notes-docker.html",
            "relUrl": "/development/notes/deployment/docker/2022/06/20/notes-docker.html",
            "date": " • Jun 20, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "Dev Tools",
            "content": "intra-day-vs-trade-close-to-close-drawdown | . Python dev tools . json to pydantic | . nbdev . github page | install: pip install nbdev | Getting Started tutorial | example | docs | release notes | video | . | Play-by-play setup repo via template note: repo name will be used as Python project name, therefore lowercase w/ underscores | . | clone repo | . | . fastdoc . notebooks -&gt; books .",
            "url": "https://szagar.github.io/cv/development/2022/06/20/notes-dev_tools.html",
            "relUrl": "/development/2022/06/20/notes-dev_tools.html",
            "date": " • Jun 20, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "Dev Notes",
            "content": "Articles . strategy performance report | . BTA . BTA Community | BTA Portal | Research: COT Report Analysis.ipynb | . Jekyll . mermaid | .",
            "url": "https://szagar.github.io/cv/development/notes/2022/06/20/notes-dev.html",
            "relUrl": "/development/notes/2022/06/20/notes-dev.html",
            "date": " • Jun 20, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "CSS Notes",
            "content": "Selectors . games ton of fun and interactive games | CSS Diner | . | . Type Selector | ID Selector: # | Descendant Selector: p strong selects all strong elements that are inside of any p | #fancy span selects any span elements that are inside of the element with id=&quot;fancy&quot; | . | Combine the Descendant &amp; ID Selectors #cool span selects all span elements that are inside of elements with id=&quot;cool&quot; | . | Class Selector: . .neato selects all elements with class=&quot;neato&quot; | . | Combine the Class Selector ul.important selects all ul elements that have class=&quot;important&quot; | #big.wide selects all elements with id=&quot;big&quot; that also have class=&quot;wide&quot; | . | Comma Combinator p, .fun selects all p elements as well as all elements with class=&quot;fun&quot; | a, p, div selects all a, p and div elements | . | The Universal Selector: ** *** p * selects any element inside all p elements. | p * selects every element inside all p elements. | ul.fancy * selects every element inside all ul class=&quot;fancy&quot; elements. | . | Adjacent Sibling Selector: ** +** p + .intro selects every element with class=&quot;intro&quot; that directly follows a &lt;p&gt; | div + a selects every &lt;a&gt; element that directly follows a &lt;div&gt; | . | General Sibling Selector: ** ~** A ~ B selects all B that follow a A | . | Child Selector: ** &gt;** A &gt; B selects all B that are a direct children A | . | First Child Pseudo-selector: ** :** :first-child selects all first child elements. | p:first-child selects all first child &lt;p&gt; elements. | div p:first-child selects all first child &lt;p&gt; elements that are in a &lt;div&gt;. | . | .",
            "url": "https://szagar.github.io/cv/development/notes/css/2022/06/20/notes-css.html",
            "relUrl": "/development/notes/css/2022/06/20/notes-css.html",
            "date": " • Jun 20, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "AirFlow Notes",
            "content": "",
            "url": "https://szagar.github.io/cv/development/notes/airflow/2022/06/20/notes-AirFlow.html",
            "relUrl": "/development/notes/airflow/2022/06/20/notes-AirFlow.html",
            "date": " • Jun 20, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "Markedown notes",
            "content": "Notebook markdown . This adds a linked superscript 15 . 15. This is the actual footnote↩ . This adds a linked superscript 20 . 20. This is the actual footnote; with a link as well! and a single quote &#39; too!↩ .",
            "url": "https://szagar.github.io/cv/markdown/notes/2022/06/20/markedown_notes.html",
            "relUrl": "/markdown/notes/2022/06/20/markedown_notes.html",
            "date": " • Jun 20, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "Fastpages notes",
            "content": "Fastpages . fastai forums | fastpages repo | repo README | upgrading guide | . Fastpages, developing locally . Run server locally Pay attention to the emitted logs when you save your notebooks or files. Often, you will see errors here that will give you important clues. | . | When developing locally Jupyter notebooks are converted to markdown files in the _posts folder. Take a look at the problematic blog posts and see if you can spot the offending HTML or markdown in that code. . | Use your browser&#39;s developer tools to see if there are any errors. Common errors are: . not able to find images because they have not been saved into the right folder, | javascript or other errors. | | If you receive a Jekyll build error or a Liquid error, search for this error on Stack Overflow to provide more insight on the problem | . Frequent Errors . Malformed front matter must be valid YAML | escape special chars with double quotes - title: &quot;Deep learning: A tutorial&quot; | YAML tutorial | . | FAQ | . Customize Fastpages . minima theme | .",
            "url": "https://szagar.github.io/cv/fastpages/jupyter/2022/06/20/fastpages_notes.html",
            "relUrl": "/fastpages/jupyter/2022/06/20/fastpages_notes.html",
            "date": " • Jun 20, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "CSS Notes",
            "content": "Selectors . games ton of fun and interactive games | CSS Diner | . | . Type Selector | ID Selector: # | Descendant Selector: p strong selects all strong elements that are inside of any p | #fancy span selects any span elements that are inside of the element with id=&quot;fancy&quot; | . | Combine the Descendant &amp; ID Selectors #cool span selects all span elements that are inside of elements with id=&quot;cool&quot; | . | Class Selector: . .neato selects all elements with class=&quot;neato&quot; | . | Combine the Class Selector ul.important selects all ul elements that have class=&quot;important&quot; | #big.wide selects all elements with id=&quot;big&quot; that also have class=&quot;wide&quot; | . | Comma Combinator p, .fun selects all p elements as well as all elements with class=&quot;fun&quot; | a, p, div selects all a, p and div elements | . | The Universal Selector: ** *** p * selects any element inside all p elements. | p * selects every element inside all p elements. | ul.fancy * selects every element inside all ul class=&quot;fancy&quot; elements. | . | Adjacent Sibling Selector: ** +** p + .intro selects every element with class=&quot;intro&quot; that directly follows a &lt;p&gt; | div + a selects every &lt;a&gt; element that directly follows a &lt;div&gt; | . | General Sibling Selector: ** ~** A ~ B selects all B that follow a A | . | Child Selector: ** &gt;** A &gt; B selects all B that are a direct children A | . | First Child Pseudo-selector: ** :** :first-child selects all first child elements. | p:first-child selects all first child &lt;p&gt; elements. | div p:first-child selects all first child &lt;p&gt; elements that are in a &lt;div&gt;. | . | .",
            "url": "https://szagar.github.io/cv/development/notes/css/2022/06/20/css_notes.html",
            "relUrl": "/development/notes/css/2022/06/20/css_notes.html",
            "date": " • Jun 20, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "CSS Notes",
            "content": "",
            "url": "https://szagar.github.io/cv/development/notes/css/2022/06/20/css_notes-Copy1.html",
            "relUrl": "/development/notes/css/2022/06/20/css_notes-Copy1.html",
            "date": " • Jun 20, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "Markets",
            "content": "BTA . Tomas (7/22): Joe, overall, NQ is not recommended anymore, it is too volatile. ES, YM, EM, QM, RTY are still good markets. Plus all the recent MICROS are great too. | . My stuff . TY has .D, 720-1400 | 24hr, 200-1600, | 120m, 240m | . | US 700-1600, 200-1600 | 80m | protective stop @ 2000 | . | . Easy . JPY | .",
            "url": "https://szagar.github.io/cv/marketes/dnp/2022/06/20/Markets.html",
            "relUrl": "/marketes/dnp/2022/06/20/Markets.html",
            "date": " • Jun 20, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "Dev Notes",
            "content": "Articles . strategy performance report | . BTA . BTA Community | BTA Portal | Research: COT Report Analysis.ipynb | . Jekyll . mermaid | .",
            "url": "https://szagar.github.io/cv/development/notes/2022/06/02/dev_notes.html",
            "relUrl": "/development/notes/2022/06/02/dev_notes.html",
            "date": " • Jun 2, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "ToDo",
            "content": "zts framwork . [x] time segments | [ ] add strategies to Striker | [ ] minute bars db | [ ] mae/mfe w/ minute bars db | [ ] python monte carlo | [ ] run dnp with short re-optimization periods | [ ] dnp on mongodb | . house . [x] basement stairs | [x] sprinklers | [ ] basement storage area | [ ] organize garage | [ ] organize work area | [ ] backyard spigot | [ ] pond waterfall | [ ] pond filter | .",
            "url": "https://szagar.github.io/cv/notes/2022/06/02/ToDo.html",
            "relUrl": "/notes/2022/06/02/ToDo.html",
            "date": " • Jun 2, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "Pandas Troubleshooting",
            "content": "*dtype warning .",
            "url": "https://szagar.github.io/cv/pandas/python/2022/05/31/troubleshooting_pandas.html",
            "relUrl": "/pandas/python/2022/05/31/troubleshooting_pandas.html",
            "date": " • May 31, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "Dev Tools",
            "content": "intra-day-vs-trade-close-to-close-drawdown | . Python dev tools . json to pydantic | . nbdev . github page | install: pip install nbdev | Getting Started tutorial | example | docs | release notes | video | . | Play-by-play setup repo via template note: repo name will be used as Python project name, therefore lowercase w/ underscores | . | clone repo | . | . fastdoc . notebooks -&gt; books .",
            "url": "https://szagar.github.io/cv/development/2022/05/31/dev_tools.html",
            "relUrl": "/development/2022/05/31/dev_tools.html",
            "date": " • May 31, 2022"
        }
        
    
  
    
        ,"post31": {
            "title": "Markets",
            "content": "My stuff . TY has .D, 720-1400 | 24hr, 200-1600, | 120m, 240m | . | US 700-1600, 200-1600 | 80m | protective stop @ 2000 | . | . Easy . JPY | .",
            "url": "https://szagar.github.io/cv/marketes/dnp/2022/05/31/Markets.html",
            "relUrl": "/marketes/dnp/2022/05/31/Markets.html",
            "date": " • May 31, 2022"
        }
        
    
  
    
  
    
        ,"post33": {
            "title": "Using plotly.express",
            "content": "import plotly.express as px . fig = px.bar(x=[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;], y=[1, 3, 2]) fig.show() . df . date GOOG AAPL AMZN FB NFLX MSFT . 0 2018-01-01 | 1.000000 | 1.000000 | 1.000000 | 1.000000 | 1.000000 | 1.000000 | . 1 2018-01-08 | 1.018172 | 1.011943 | 1.061881 | 0.959968 | 1.053526 | 1.015988 | . 2 2018-01-15 | 1.032008 | 1.019771 | 1.053240 | 0.970243 | 1.049860 | 1.020524 | . 3 2018-01-22 | 1.066783 | 0.980057 | 1.140676 | 1.016858 | 1.307681 | 1.066561 | . 4 2018-01-29 | 1.008773 | 0.917143 | 1.163374 | 1.018357 | 1.273537 | 1.040708 | . ... ... | ... | ... | ... | ... | ... | ... | . 100 2019-12-02 | 1.216280 | 1.546914 | 1.425061 | 1.075997 | 1.463641 | 1.720717 | . 101 2019-12-09 | 1.222821 | 1.572286 | 1.432660 | 1.038855 | 1.421496 | 1.752239 | . 102 2019-12-16 | 1.224418 | 1.596800 | 1.453455 | 1.104094 | 1.604362 | 1.784896 | . 103 2019-12-23 | 1.226504 | 1.656000 | 1.521226 | 1.113728 | 1.567170 | 1.802472 | . 104 2019-12-30 | 1.213014 | 1.678000 | 1.503360 | 1.098475 | 1.540883 | 1.788185 | . 105 rows × 7 columns . import plotly.express as px df = px.data.stocks() fig = px.line(df, x=&#39;date&#39;, y=&quot;GOOG&quot;) #fig.add_trace(go.Scatter(mode=&quot;markers&quot;, x=df[&quot;date&quot;], y=df[&quot;AAPL&quot;], name=&quot;AAPL&quot;)) fig.show() . import plotly.graph_objects as go import pandas as pd df = pd.read_csv(&#39;https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv&#39;) fig = go.Figure([go.Scatter(x=df[&#39;Date&#39;], y=df[&#39;AAPL.High&#39;])]) fig.show() . import plotly.express as px df = px.data.stocks(indexed=True)-1 fig = px.bar(df, x=df.index, y=&quot;GOOG&quot;) fig.show() . import plotly.express as px df = px.data.stocks(indexed=True)-1 fig = px.area(df, facet_col=&quot;company&quot;, facet_col_wrap=2) fig.show() . df . company GOOG AAPL AMZN FB NFLX MSFT . date . 2018-01-01 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | . 2018-01-08 0.018172 | 0.011943 | 0.061881 | -0.040032 | 0.053526 | 0.015988 | . 2018-01-15 0.032008 | 0.019771 | 0.053240 | -0.029757 | 0.049860 | 0.020524 | . 2018-01-22 0.066783 | -0.019943 | 0.140676 | 0.016858 | 0.307681 | 0.066561 | . 2018-01-29 0.008773 | -0.082857 | 0.163374 | 0.018357 | 0.273537 | 0.040708 | . ... ... | ... | ... | ... | ... | ... | . 2019-12-02 0.216280 | 0.546914 | 0.425061 | 0.075997 | 0.463641 | 0.720717 | . 2019-12-09 0.222821 | 0.572286 | 0.432660 | 0.038855 | 0.421496 | 0.752239 | . 2019-12-16 0.224418 | 0.596800 | 0.453455 | 0.104094 | 0.604362 | 0.784896 | . 2019-12-23 0.226504 | 0.656000 | 0.521226 | 0.113728 | 0.567170 | 0.802472 | . 2019-12-30 0.213014 | 0.678000 | 0.503360 | 0.098475 | 0.540883 | 0.788185 | . 105 rows × 6 columns . import plotly.express as px df = px.data.stocks() fig = px.line(df, x=&quot;date&quot;, y=df.columns, hover_data={&quot;date&quot;: &quot;|%B %d, %Y&quot;}, title=&#39;custom tick labels&#39;) fig.update_xaxes( dtick=&quot;M1&quot;, tickformat=&quot;%b n%Y&quot;) fig.show() . import sys sys.executable . Dash . import plotly.graph_objects as go # or plotly.express as px fig = go.Figure() # or any Plotly Express function e.g. px.bar(...) # fig.add_trace( ... ) # fig.update_layout( ... ) import dash import dash_core_components as dcc #import dash_html_components as html from dash import html app = dash.Dash() app.layout = html.Div([ dcc.Graph(figure=fig) ]) #app.run_server(debug=True, use_reloader=False) # Turn off reloader if inside Jupyter app.run_server(debug=True, use_reloader=False) # Turn off reloader if inside Jupyter .",
            "url": "https://szagar.github.io/cv/2022/05/12/plotly_examples.html",
            "relUrl": "/2022/05/12/plotly_examples.html",
            "date": " • May 12, 2022"
        }
        
    
  
    
        ,"post34": {
            "title": "Interview Preparation",
            "content": "Dynamic Programming . leetcode | AlgoExpert | Dynamic Programming - Learn to Solve Algorithmic Problems &amp; Coding Challenges | inverting a binary key | reverse linked list | suffix tree | min/max heap | merge sort | . DP notes . 2 types: memoirization &amp; tabulation | example:&gt; Minimum Steps to Minimize n to 1 Given an integer n, return the minimum steps to minimize n to 1 . | . Avaliable steps are:- Decrement n by 1- if n is divisible by 2, then divide n by 2 . if n is divisible by 3, then divide n by e | . Examples: . 10 =&gt; 3 steps (10 =&gt; 9 =&gt; 3 =&gt; 1) | 15 =&gt; 4 steps (15 =&gt; 5 =&gt; 4 =&gt; 2 =&gt; 1) | . 6 - 5 - 4 - 3 - 2 - 1 - 1 - 1 #@lru_cache def f(n: int, memo: dict) -&gt; int: #print(f&quot;f({n})&quot;) if n == 1: return 0 if n in memo: return memo[n] if n in (3,2): return 1 nsteps = f(n-1, memo) if n%3 == 0: nsteps = min(nsteps, f(n//3, memo)) if n%2 == 0: nsteps = min(nsteps, f(n//2, memo)) #print(nsteps) memo[n] = nsteps + 1 return memo[n] print(f(1000, {})) . 9 . def f(n: int, memo: list[int]) -&gt; int: if n == 1: return 0 if memo[n]: return memo[n] if n in (3,2): return 1 nsteps = f(n-1, memo) if n%3 == 0: nsteps = min(nsteps, f(n//3, memo)) if n%2 == 0: nsteps = min(nsteps, f(n//2, memo)) #print(nsteps) memo[n] = nsteps + 1 return memo[n] n = 10 memo = [None] * (n+1) print(f(n, memo)) . 3 . via tabulation . def f(n: int) -&gt; int: tbl = [n] * (n+1) tbl[1] = 0 print(tbl) for tbl_idx in range(1,n): print(f&quot;tbl_idx={tbl_idx}&quot;) tbl[tbl_idx+1] = min(tbl[tbl_idx+1], tbl[tbl_idx] + 1) if tbl_idx*2 &lt;= n and tbl[tbl_idx*2]%2 == 0: tbl[tbl_idx*2] = min(tbl[tbl_idx*2], tbl[tbl_idx] + 1) if tbl_idx*3 &lt;= n and tbl[tbl_idx*3]%3 == 0: tbl[tbl_idx*3] = min(tbl[tbl_idx*3], tbl[tbl_idx] + 1) print(tbl) return tbl[n] print( f(6) ) . [6, 0, 6, 6, 6, 6, 6] . tbl_idx=1 . [6, 0, 1, 1, 6, 6, 6] . tbl_idx=2 . [6, 0, 1, 1, 2, 6, 2] . tbl_idx=3 . [6, 0, 1, 1, 2, 6, 2] . tbl_idx=4 . [6, 0, 1, 1, 2, 3, 2] . tbl_idx=5 . [6, 0, 1, 1, 2, 3, 2] . 2 . Initialize array . ar = [[r*c for c in range(1,5)] for r in range(1,3)] . ar . [[1, 2, 3, 4], [2, 4, 6, 8]] . Target Sum (tabulation) . def target_sum(tgt: int, arr: list[int]) -&gt; bool: sums = [False] * (tgt+1) sums[0] = True for s in range(len(sums)): if not sums[s]: continue for value in arr: new_sum = s+value #if new_sum == tgt: # return True if new_sum &gt; tgt: continue sums[new_sum] = True print(sums) return sums[tgt] print(target_sum(7, [5,3,4])) . [True, False, False, False, False, True, False, False] [True, False, False, True, False, True, False, False] [True, False, False, True, True, True, False, False] [True, False, False, True, True, True, True, False] [True, False, False, True, True, True, True, True] [True, False, False, True, True, True, True, True] True . how_sum (tabulation) . how_sum(target_sum, numbers) | return an array containing any combination of elements taht add up to target_sum | if there is no combination that adds to target_sum, then return null | if there are multiple combinations, return any single combo | how_sum(7, [5, 3, 4]) -&gt; [4, 3] | . from rich import print def how_sum(target_sum: int, numbers: list[int]) -&gt; list[int]: #sums = defaultdict(list) sums = {_: [] for _ in range(target_sum+1)} #sums = {_: None for _ in range(target_sum+1)} sums[0] = [[]] for sum in sums.keys(): if not sums[sum]: continue for number in numbers: new_sum = number+sum if new_sum &gt; target_sum: continue for prev_sum in sums[sum]: if prev_sum is None: continue params = prev_sum.copy() params.append(number) sums[new_sum].append(params) break #print(sums) return sums[target_sum][0] if sums[target_sum] else None . print(how_sum(121, [5,4,3])) . [3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5] . best_sum (tabulation) . best_sum(target_sum, numbers) -&gt; list[int] | returns array containing shortest combonation of numbers that sum to target_sum | if there&#39;s a tie, return either | . def best_sum(target_sum: int, numbers: list[int]) -&gt; list[int]: #sums = {_: [] for _ in range(target_sum+1)} sums = {_: None for _ in range(target_sum+1)} sums[0] = [] for sum in sums.keys(): if sums[sum] is None: continue for number in numbers: new_sum = number+sum if new_sum &gt; target_sum: continue #prev_sum = sums[sum] # if prev_sum is None: continue params = sums[sum].copy() params.append(number) if not sums[new_sum] or len(params) &lt; len(sums[new_sum]): sums[new_sum] = params #print(sums) return sums[target_sum] if sums[target_sum] else None . rslt = best_sum(1000, [5,4,6,7,8,9,10,14,17,23]) print(len(rslt),rslt) . 44 [ 17, 17, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23 ] . can_construnct (tabulation) . can_construct(target: str, word_bank: list[str]) -&gt; bool: | return true if target can be constructed from strings in word_bank | may reuse elements | can_construct(&#39;abcdef&#39;, [&#39;ab&#39;, &#39;abc&#39;, &#39;cd&#39;, &#39;def&#39;, &#39;abcd&#39;]) --&gt; True | . def can_construct(target: str, word_bank: list[str]) -&gt; bool: # 0 1 2 3 4 5 # a b c d e # ^ tbl = [False] * (len(target)+1) tbl[0] = True for tbl_idx in range(len(target)+1): if not tbl[tbl_idx]: print(&quot;skip&quot;) continue for w in word_bank: n = len(w) print(f&quot;slice: {target[tbl_idx:tbl_idx+n]} n={n} w={w}&quot;) if target[tbl_idx:tbl_idx+n] == w: tbl[tbl_idx+n] = True print(tbl) if tbl[-1]: return True return False rslt = can_construct(&#39;abcdef&#39;, [&#39;ab&#39;, &#39;abc&#39;, &#39;cd&#39;, &#39;def&#39;, &#39;abcd&#39;]) rslt . slice: ab n=2 w=ab . [True, False, True, False, False, False, False] . slice: abc n=3 w=abc . [True, False, True, True, False, False, False] . slice: ab n=2 w=cd . slice: abc n=3 w=def . slice: abcd n=4 w=abcd . [True, False, True, True, True, False, False] . skip . slice: cd n=2 w=ab . slice: cde n=3 w=abc . slice: cd n=2 w=cd . [True, False, True, True, True, False, False] . slice: cde n=3 w=def . slice: cdef n=4 w=abcd . slice: de n=2 w=ab . slice: def n=3 w=abc . slice: de n=2 w=cd . slice: def n=3 w=def . [True, False, True, True, True, False, True] . True . can_construnct w/ count (tabulation) . can_construct(target: str, word_bank: list[str]) -&gt; int: | return number of ways target can be constructed from strings in word_bank | may reuse elements | can_construct(&#39;abcdef&#39;, [&#39;ab&#39;, &#39;abc&#39;, &#39;cd&#39;, &#39;def&#39;, &#39;abcd&#39;]) --&gt; n | . def can_construct(target: str, word_bank: list[str]) -&gt; int: # a b c d e f _ len = 6 # 0 1 2 3 4 5 6 # ^ &quot;&quot; # ^ &quot;a&quot; # ^ &quot;abcdef&quot; # 1 0 0 0 0 0 # 1 0 1 0 0 0 &quot;ab&quot; = curr + prev # 1 0 1 0 1 0 &quot;cd&quot; # 1 0 1 0 2 0 &quot;abcd&quot; tbl = [False] * (len(target)+1) tbl = [0] * (len(target)+1) tbl[0] = 1 for tbl_idx in range(len(target)+1): if tbl[tbl_idx] == 0: continue for wd in word_bank: wd_len = len(wd) if target[tbl_idx:tbl_idx+wd_len] == wd: tbl[tbl_idx+wd_len] += tbl[tbl_idx] #if tbl_idx == 0: tbl[tbl_idx+wd_len] -= 1 #print(tbl) return tbl[-1] rslt = can_construct(&#39;purple&#39;, [&#39;purp&#39;, &#39;p&#39;, &#39;ur&#39;, &#39;le&#39;, &#39;purpl&#39;]) print(rslt) assert rslt == 2 rslt = can_construct(&#39;abcdef&#39;, [&#39;ab&#39;, &#39;abc&#39;, &#39;cd&#39;, &#39;def&#39;, &#39;abcd&#39;]) print(rslt) assert rslt == 1 rslt = can_construct(&#39;skateboard&#39;, [&#39;bo&#39;, &#39;rd&#39;, &#39;ate&#39;, &#39;t&#39;, &#39;ska&#39;, &#39;sk&#39;, &#39;boar&#39;]) print(rslt) assert rslt == 0 rslt = can_construct(&#39;enterapotentpot&#39;, [&#39;a&#39;, &#39;p&#39;, &#39;ent&#39;, &#39;enter&#39;, &#39;ot&#39;, &#39;o&#39;, &#39;t&#39;]) print(rslt) assert rslt == 4 . 2 . 1 . 0 . 4 . can_construnct w/ details (tabulation) . can_construct(target: str, word_bank: list[str]) -&gt; list[str]: | return combinations of words target can be constructed from strings in word_bank | may reuse elements | can_construct(&#39;abcdef&#39;, [&#39;ab&#39;, &#39;abc&#39;, &#39;cd&#39;, &#39;def&#39;, &#39;abcd&#39;]) --&gt; [[&#39;ab&#39;,&#39;cd&#39;,&#39;def&#39;],[&#39;abc&#39;,&#39;def&#39;], ...] | . notes . initialize: tbl = [[] for in range(len(target)+1)]tbl = [[] for in range(len(target)+1)] | append does not return list | . from rich import print def can_construct(target: str, word_bank: list[str]) -&gt; list[str]: tbl = [[] for _ in range(len(target)+1)] tbl[0] = [[]] for tbl_idx in range(len(target)+1): if not len(tbl[tbl_idx]): continue for wd in word_bank: wd_len = len(wd) if target[tbl_idx:tbl_idx+wd_len] == wd: for base_arr in tbl[tbl_idx]: tbl[tbl_idx+wd_len].append(base_arr.copy()) tbl[tbl_idx+wd_len][-1].append(wd) return tbl[-1] rslt = can_construct(&#39;abcdef&#39;, [&#39;ab&#39;, &#39;abc&#39;, &#39;cd&#39;, &#39;def&#39;, &#39;abcd&#39;, &#39;ef&#39;, &#39;c&#39;]) print(rslt) . [[&#39;abc&#39;, &#39;def&#39;], [&#39;ab&#39;, &#39;c&#39;, &#39;def&#39;], [&#39;abcd&#39;, &#39;ef&#39;], [&#39;ab&#39;, &#39;cd&#39;, &#39;ef&#39;]] . rslt = can_construct(&#39;enterapotentpot&#39;, [&#39;a&#39;, &#39;p&#39;, &#39;ent&#39;, &#39;enter&#39;, &#39;ot&#39;, &#39;o&#39;, &#39;t&#39;]) rslt . [[&#39;enter&#39;, &#39;a&#39;, &#39;p&#39;, &#39;ot&#39;, &#39;ent&#39;, &#39;p&#39;, &#39;ot&#39;], [&#39;enter&#39;, &#39;a&#39;, &#39;p&#39;, &#39;o&#39;, &#39;t&#39;, &#39;ent&#39;, &#39;p&#39;, &#39;ot&#39;], [&#39;enter&#39;, &#39;a&#39;, &#39;p&#39;, &#39;ot&#39;, &#39;ent&#39;, &#39;p&#39;, &#39;o&#39;, &#39;t&#39;], [&#39;enter&#39;, &#39;a&#39;, &#39;p&#39;, &#39;o&#39;, &#39;t&#39;, &#39;ent&#39;, &#39;p&#39;, &#39;o&#39;, &#39;t&#39;]] . rslt = can_construct(&#39;&#39;, [&#39;a&#39;, &#39;p&#39;, &#39;ent&#39;, &#39;enter&#39;, &#39;ot&#39;, &#39;o&#39;, &#39;t&#39;]) rslt . [[]] . rslt = can_construct(&#39;XX&#39;, [&#39;a&#39;, &#39;p&#39;, &#39;ent&#39;, &#39;enter&#39;, &#39;ot&#39;, &#39;o&#39;, &#39;t&#39;]) rslt . [] .",
            "url": "https://szagar.github.io/cv/job/interview/notes/2022/01/02/interview_prep.html",
            "relUrl": "/job/interview/notes/2022/01/02/interview_prep.html",
            "date": " • Jan 2, 2022"
        }
        
    
  
    
        ,"post35": {
            "title": "OOP Notes",
            "content": "OOP was developed to increase the reusability and maintainability of source code. . ArjanCodes OOP tips . You can combine FP with OOP | Make classes either Behavior Oriented or Data Oriented | Be careful with inheritance | Use dependency injection / dependcy inversion | Don&#39;t abuse Python&#39;s power features | Terms . polymorphism is the provision of a single interface to entities of different types | . Variables . Class variables – belong to the class as a whole; there is only one copy of each one | Instance variables or attributes – data that belongs to individual objects; every object has its own copy of each one | Member variables – refers to both the class and instance variables that are defined by a particular class | . Methods . Class methods – belong to the class as a whole and have access to only class variables and inputs from the procedure call | Instance methods – belong to individual objects, and have access to instance variables for the specific object they are called on, inputs, and class variables | . class-based programming . prototype-based . objects are the primary entities. No classes even exist. | . Data Abstraction . Encapsulation . Composition, inheritance, and delegation . Polymorphism . Open recursion . design patterns . can be used to refer to any general, repeatable, solution pattern to a commonly occurring problem in software design. Some of these commonly occurring problems have implications and solutions particular to object-oriented development . Creational patterns (5): Factory method pattern, Abstract factory pattern, Singleton pattern, Builder pattern, Prototype pattern | Structural patterns (7): Adapter pattern, Bridge pattern, Composite pattern, Decorator pattern, Facade pattern, Flyweight pattern, Proxy pattern | Behavioral patterns (11): Chain-of-responsibility pattern, Command pattern, Interpreter pattern, Iterator pattern, Mediator pattern, Memento pattern, Observer pattern, State pattern, Strategy pattern, Template method pattern, Visitor pattern | . SOLID is a mnemonic invented by Michael Feathers which spells out five software engineering design principles: . Single responsibility principle | Open/closed principle | Liskov substitution principle | Interface segregation principle | Dependency inversion principle | . Coupling refers to the interdependencies between modules. cohesion describes how related the functions within a single module are. Low cohesion implies that a given module performs tasks which are not very related to each other and hence can create problems as the module becomes large. . Low coupling often correlates with high cohesion, and vice versa. Low coupling is often thought to be a sign of a well-structured computer system and a good design, and when combined with high cohesion, supports the general goals of high readability and maintainability. . Disadvantages of tight coupling Tightly coupled systems tend to exhibit the following developmental characteristics, which are often seen as disadvantages:1. A change in one module usually forces a ripple effect of changes in other modules.1. Assembly of modules might require more effort and/or time due to the increased inter-module dependency. . A particular module might be harder to reuse and/or test because dependent modules must be included. | Low cohesion is associated with undesirable traits such as being difficult to maintain, test, reuse, or even understand. . Other . Protocol . class Payment(Protocol):&gt; def pay(self, amount: int) -&gt; None:&gt; ... . class PaypalPayment(Payment):def pay(self, amount: int) -&gt; None: print(f&quot;Paying {amount} using PayPal&quot;) . class StripePayment(Payment): def pay(self, amount: int) =&gt; None: print(f&quot;Paying {amount} using Stripe&quot;) . PAYMENT_METHODS: dict{PaymentMethod, type[Payment]] = { PaymentMethod.CARD: StipePayment, PaymentMethod.PAYPAL: PaypalPayment, } . def main(): my_payment = PAYMENT_METHODS[PaymentMethod.PAYPAL()) my_payment.pay(100) .",
            "url": "https://szagar.github.io/cv/interview/oop/notes/2022/01/02/interview_oop.html",
            "relUrl": "/interview/oop/notes/2022/01/02/interview_oop.html",
            "date": " • Jan 2, 2022"
        }
        
    
  
    
        ,"post36": {
            "title": "Interview - Kangaroo Words",
            "content": "def is_kang_word(word,kang) -&gt; bool: word = word.upper() kang = kang.upper() if len(word) == len(kang): return False k_ptr = w_ptr = 0 while True: if kang[k_ptr] == word[w_ptr]: k_ptr += 1 w_ptr += 1 if k_ptr == len(kang): return True if w_ptr == len(word): break return False . import re def is_kang_word(word,kang) -&gt; bool: if len(word) == len(kang): return False return re.match(f&quot;.*{&#39;.*&#39;.join(kang)}.*&quot;,word) . import re def is_kang_word(word,kang): pattern = f&#39;.*{&quot;.*&quot;.join(kang)}.*&#39; return re.match(pattern,word) and len(word) != len(kang) . for word,kang in kang_pairs: is_or_not = &quot; not &quot; if is_kang_word(word.upper(), kang.upper()): is_or_not = &quot; &quot; print(f&quot;{word.upper()} is{is_or_not}a kangaroo word for {kang.upper()}&quot;) . FOOTBALL is a kangaroo word for BALL ALE is not a kangaroo word for APPLE APPLE is a kangaroo word for ALE CLEMSON is a kangaroo word for SON ALLOCATE is a kangaroo word for ALLOT MERCER is not a kangaroo word for CERR BITCH is not a kangaroo word for BITCH EEEEEEEE is a kangaroo word for EEEEEEE .",
            "url": "https://szagar.github.io/cv/interview/2022/01/02/interview_kangaroo_words.html",
            "relUrl": "/interview/2022/01/02/interview_kangaroo_words.html",
            "date": " • Jan 2, 2022"
        }
        
    
  
    
        ,"post37": {
            "title": "Bookmarks - 2022-05-30",
            "content": "My stuff . cv | fp-blog | github:fp-blog | github:cv | . Watch list . talk python git | . Reading list . How to setup google domain for github pages | . Blogs . bta | Automation Panda | Lj Miranda - data scientist blog setup | Arjan Codes | death.andgravity | . Articles . Pandas, loading csv | Pandas, time series | Mermaid Create diagrams quickly and effortlessly 1 | Mermaid Create diagrams quickly and effortlessly 2 link *the-concept-of-maximum-adverse-excursion-mae | The unreasonable effectiveness of f‍-‍strings and re.VERBOSE | . Reference . jekyll docs | minima/README.md | Collections | . | EasyLanguage Object Reference | . Systematic firms . Two Sigma | Renaissance | Bridgewater | D E Shaw &amp; Co | Marathon Asset Management | AQR Capital Management | Winton | Cow Harbor Systems | .",
            "url": "https://szagar.github.io/cv/fastpages/jupyter/2022/01/01/Bookmarks.html",
            "relUrl": "/fastpages/jupyter/2022/01/01/Bookmarks.html",
            "date": " • Jan 1, 2022"
        }
        
    
  
    
        ,"post38": {
            "title": "Markedown notes",
            "content": "Notebook markdown . This adds a linked superscript 15 . 15. This is the actual footnote↩ . This adds a linked superscript 20 . 20. This is the actual footnote; with a link as well! and a single quote &#39; too!↩ .",
            "url": "https://szagar.github.io/cv/markdown/notes/2020/05/27/markedown_notes.html",
            "relUrl": "/markdown/notes/2020/05/27/markedown_notes.html",
            "date": " • May 27, 2020"
        }
        
    
  
    
        ,"post39": {
            "title": "Fastpages notes",
            "content": "Fastpages . fastai forums | fastpages repo | repo README | upgrading guide | . Fastpages, developing locally . Run server locally Pay attention to the emitted logs when you save your notebooks or files. Often, you will see errors here that will give you important clues. | . | When developing locally Jupyter notebooks are converted to markdown files in the _posts folder. Take a look at the problematic blog posts and see if you can spot the offending HTML or markdown in that code. . | Use your browser&#39;s developer tools to see if there are any errors. Common errors are: . not able to find images because they have not been saved into the right folder, | javascript or other errors. | | If you receive a Jekyll build error or a Liquid error, search for this error on Stack Overflow to provide more insight on the problem | . Frequent Errors . Malformed front matter must be valid YAML | escape special chars with double quotes - title: &quot;Deep learning: A tutorial&quot; | YAML tutorial | . | FAQ | . Customize Fastpages . minima theme | .",
            "url": "https://szagar.github.io/cv/fastpages/jupyter/2020/05/27/development_bookmarks.html",
            "relUrl": "/fastpages/jupyter/2020/05/27/development_bookmarks.html",
            "date": " • May 27, 2020"
        }
        
    
  
    
        ,"post40": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://szagar.github.io/cv/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "Is all About Me",
          "content": "Thiss website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://szagar.github.io/cv/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "Not About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://szagar.github.io/cv/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
      ,"page8": {
          "title": "All About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://szagar.github.io/cv/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
  

  
  

  

  

  
  

  
      ,"page14": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://szagar.github.io/cv/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}